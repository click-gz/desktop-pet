// ÂÆ†Áâ©Ë°å‰∏∫Á≥ªÁªü
class DesktopPet {
    constructor() {
        this.pet = document.getElementById('pet');
        this.container = document.getElementById('pet-container');
        this.statusText = document.getElementById('status-text');
        this.moodFill = document.getElementById('mood-fill');
        this.energyFill = document.getElementById('energy-fill');
        this.speechBubble = document.getElementById('speech-bubble');
        this.speechText = document.getElementById('speech-text');
        this.sleepIndicator = document.getElementById('sleep-indicator');
        
        this.state = 'idle'; // idle, walking, excited, sleeping
        this.mood = 80; // 0-100
        this.energy = 100; // 0-100
        this.position = { x: 100, y: 100 };
        this.targetPosition = null;
        this.isMoving = false;
        this.isDragging = false;
        
        this.behaviors = {
            idle: { duration: 3000, next: ['excited'], name: 'üí≠ ÂæÖÊú∫' },
            excited: { duration: 2500, next: ['idle', 'sleeping'], name: 'üéâ ÂÖ¥Â•ã' },
            sleeping: { duration: 6000, next: ['idle'], name: 'üò¥ Áù°Ëßâ' }
        };
        
        // ÁßªÂä®Áõ∏ÂÖ≥Â±ûÊÄß
        this.lastInteractionTime = Date.now();
        this.excitedMoveTimer = null;
        this.mousePosition = { x: 0, y: 0 };
        
        // ËÉΩÈáèÁ≥ªÁªüÂ±ûÊÄß
        this.energyDecayTimer = null;
        this.sleepRecoveryTimer = null;
        this.isEnergySystemActive = true;
        this.lastEnergyUpdateTime = Date.now();
        
        // Â∑ÆÂºÇÂåñËÉΩÈáèÊ∂àËÄóÁéáÔºàÊØèÊØ´ÁßíÊ∂àËÄóÁöÑËÉΩÈáèÁôæÂàÜÊØîÔºâ
        this.energyDecayRates = {
            idle: 100 / (60 * 60 * 1000),      // ÂæÖÊú∫Ôºö1Â∞èÊó∂ËÄóÂ∞Ω
            excited: 100 / (40 * 60 * 1000),   // ÂÖ¥Â•ãÔºö40ÂàÜÈíüËÄóÂ∞Ω
            sleeping: 0                         // Áù°Áú†Ôºö‰∏çÊ∂àËÄó
        };
        
        this.lastInteractionForEnergy = Date.now();
        this.energyRecoveryAmount = 1; // ÊØèÊ¨°ÁÇπÂáªÊÅ¢Â§ç1%ËÉΩÈáè
        this.minInteractionInterval = 2000; // Èò≤Ê≠¢ËøáÂ∫¶ÁÇπÂáªÁöÑÊúÄÂ∞èÈó¥Èöî(2Áßí)
        
        // ÁßªÂä®ËÉΩÈáèÊ∂àËÄóÁõ∏ÂÖ≥
        this.moveEnergyCost = 2; // Âü∫Á°ÄÁßªÂä®ËÉΩÈáèÊ∂àËÄó
        this.maxMoveEnergyCost = 5; // ÊúÄÂ§ßÁßªÂä®ËÉΩÈáèÊ∂àËÄó
        
        this.messages = {
            idle: ['Âú®ÊÉ≥‰ªÄ‰πàÂë¢...', '‰ªäÂ§©Â§©Ê∞î‰∏çÈîô~', '‰∏ª‰∫∫Âú®Âøô‰ªÄ‰πàÔºü', 'Êó†ËÅäing...', 'ÈúÄË¶ÅÂÅöÁÇπ‰ªÄ‰πàÂêóÔºü'],
            excited: ['Â•ΩÂºÄÂøÉÔºÅ', 'ËÄ∂ÔºÅ', 'Â§™Ê£í‰∫ÜÔºÅ', 'Ÿ©(‚óï‚Äø‚óï)€∂', 'Â•ΩÁ≤æÁ•ûÔºÅ', 'ÊÑüËßâÂÖÖÊª°‰∫ÜÂäõÈáèÔºÅ'],
            sleeping: ['ZZZ...', 'Â•ΩÂõ∞...', 'ÂÅö‰∫Ü‰∏™Â•ΩÊ¢¶', 'ÂëºÂëº...', 'Âú®ÊÅ¢Â§çËÉΩÈáè...'],
            greeting: ['‰Ω†Â•ΩÔºÅ', '‰∏ª‰∫∫ÂõûÊù•‰∫ÜÔºÅ', 'ÊÉ≥Êàë‰∫ÜÂêóÔºü', 'Ê¨¢ËøéÂõûÊù•~', 'ÂæàÈ´òÂÖ¥ËßÅÂà∞‰Ω†ÔºÅ'],
            tired: ['Â•ΩÁ¥ØÂïä...', 'ÈúÄË¶Å‰ºëÊÅØ‰∏Ä‰∏ã', 'ËÉΩÈáè‰∏çË∂≥...', 'ÊÑüËßâË¶ÅÁù°ÁùÄ‰∫Ü', 'Ê≤°ÂäõÊ∞î‰∫Ü...'],
            energyLow: ['ËÉΩÈáè‰∏çÂ§ü‰∫Ü...', 'Â•ΩÁ¥ØÂïä', 'ÈúÄË¶Å‰ºëÊÅØ', 'ÊÑüËßâË¶ÅÁù°ÁùÄ‰∫Ü', 'Â§™Á¥Ø‰∫Ü...', 'ËÉΩÈáèÂç≥Â∞ÜËÄóÂ∞Ω'],
            energyRecovered: ['Á≤æÁ•û‰∫ÜÂæàÂ§öÔºÅ', 'Ë∞¢Ë∞¢‰∏ª‰∫∫ÔºÅ', 'ÂèàÊúâËÉΩÈáè‰∫ÜÔºÅ', 'ÊÑüËßâÂ•ΩÂ§ö‰∫ÜÔºÅ', 'Ë∞¢Ë∞¢‰Ω†ÁöÑÂÖ≥ÂøÉÔºÅ', 'Áé∞Âú®Â•ΩÂ§ö‰∫ÜÔºÅ']
        };
        
        this.init();
    }
    
    init() {
        this.setupEventListeners();
        this.setupMouseTracking();
        this.initializePosition();
        // Á¶ÅÁî®Ëá™Âä®Ë°å‰∏∫Âæ™ÁéØ
        // this.startBehaviorLoop();
        this.updateMoodDisplay();
        this.startEnergySystem(); // ÂêØÂä®ËÉΩÈáèÁ≥ªÁªü
        
        // ÊòæÁ§∫Ê¨¢ËøéÊ∂àÊÅØ
        setTimeout(() => {
            this.showMessage('greeting');
        }, 1000);
    }
    
    setupEventListeners() {
        // ÁÇπÂáª‰∫§‰∫í
        this.pet.addEventListener('click', (e) => {
            e.preventDefault();
            if (!this.isDragging) {
                // Êõ¥Êñ∞ÊúÄÂêé‰∫§‰∫íÊó∂Èó¥
                this.lastInteractionTime = Date.now();
                this.interact();
            }
        });
        
        // ‰ΩøÁî® Pointer Events + rAF ÂÆûÁé∞‰∏ùÊªëÊãñÊãΩ
        this.initPointerDragSystem();
        
        // ÊÇ¨ÂÅúÊòæÁ§∫Áä∂ÊÄÅ
        this.pet.addEventListener('mouseenter', () => {
            if (!this.isDragging) {
                this.updateStatusDisplay();
            }
        });
        
        // ÁßªÈô§ÊâÄÊúâËá™Âä®Ë°å‰∏∫ÂäüËÉΩ
    }
    
    // ‰ΩøÁî® Pointer Events + requestAnimationFrame ÂÆûÁé∞‰∏ùÊªëÊãñÊãΩ
    initPointerDragSystem() {
        const self = this;
        const petEl = this.pet;
        let ipcRenderer = null;
        try {
            if (typeof require !== 'undefined') {
                ipcRenderer = require('electron').ipcRenderer;
            }
        } catch (e) {
            ipcRenderer = null;
        }
        
        let dragFrame = null;
        let dragging = false;
        let startCursor = { x: 0, y: 0 };
        let startWindow = { x: 0, y: 0 };
        let pendingPos = { x: 0, y: 0 };
        const windowSize = { w: 250, h: 250 }; // ‰∏é‰∏ªÁ™óÂè£‰∏ÄËá¥
        
        function onPointerDown(e) {
            // ‰ªÖÂ∑¶ÈîÆÊàñËß¶Êë∏
            if (e.button !== undefined && e.button !== 0) return;
            dragging = true;
            self.isDragging = true;
            self.lastInteractionTime = Date.now();
            
            // Á¶ÅÁî®ÈÄâÊã©ÂíåÂä®ÁîªÔºåËÆæÁΩÆÊ†∑Âºè
            document.body.style.cursor = 'grabbing';
            document.body.style.userSelect = 'none';
            petEl.classList.add('dragging');
            const sprite = petEl.querySelector('.pet-sprite');
            if (sprite) sprite.style.animation = 'none';
            petEl.style.transition = 'none';
            
            // ÊçïËé∑ÊåáÈíà
            try { petEl.setPointerCapture(e.pointerId); } catch (_) {}
            
            // ËÆ∞ÂΩïËµ∑ÂßãÊï∞ÊçÆ
            const screenX = (window.screenX || window.screenLeft || 0) + e.clientX;
            const screenY = (window.screenY || window.screenTop || 0) + e.clientY;
            startCursor.x = screenX;
            startCursor.y = screenY;
            
            if (ipcRenderer) {
                const pos = self.position;
                startWindow.x = pos.x || 0;
                startWindow.y = pos.y || 0;
            } else {
                startWindow.x = 0;
                startWindow.y = 0;
            }
            
            pendingPos.x = startWindow.x;
            pendingPos.y = startWindow.y;
            
            // ÂêØÂä®rAFÂæ™ÁéØ
            if (!dragFrame) {
                const loop = () => {
                    if (!dragging) { dragFrame = null; return; }
                    if (ipcRenderer) {
                        ipcRenderer.send('move-window', pendingPos.x, pendingPos.y);
                        // Êú¨Âú∞ËÆ∞ÂΩïÔºåÂáèÂ∞ëÊäñÂä®
                        self.position.x = pendingPos.x;
                        self.position.y = pendingPos.y;
                    }
                    dragFrame = requestAnimationFrame(loop);
                };
                dragFrame = requestAnimationFrame(loop);
            }
        }
        
        function onPointerMove(e) {
            if (!dragging) return;
            const screenX = (window.screenX || window.screenLeft || 0) + e.clientX;
            const screenY = (window.screenY || window.screenTop || 0) + e.clientY;
            const dx = screenX - startCursor.x;
            const dy = screenY - startCursor.y;
            
            let nextX = Math.round(startWindow.x + dx);
            let nextY = Math.round(startWindow.y + dy);
            
            // ËæπÁïåÈôêÂà∂
            const maxX = Math.max(0, window.screen.width - windowSize.w);
            const maxY = Math.max(0, window.screen.height - windowSize.h);
            if (isFinite(maxX) && isFinite(maxY)) {
                nextX = Math.max(0, Math.min(maxX, nextX));
                nextY = Math.max(0, Math.min(maxY, nextY));
            }
            
            pendingPos.x = nextX;
            pendingPos.y = nextY;
        }
        
        function endDrag() {
            if (!dragging) return;
            dragging = false;
            self.isDragging = false;
            petEl.classList.remove('dragging');
            document.body.style.cursor = '';
            document.body.style.userSelect = '';
            
            // Âπ≥ÊªëÊÅ¢Â§çÂä®Áîª
            requestAnimationFrame(() => {
                petEl.style.transition = 'transform 0.2s ease-out';
                const sprite = petEl.querySelector('.pet-sprite');
                setTimeout(() => {
                    if (!self.isDragging && sprite) {
                        petEl.style.animation = '';
                        sprite.style.animation = 'breathe 2s ease-in-out infinite';
                    }
                }, 200);
            });
        }
        
        function onPointerUp(e) {
            try { petEl.releasePointerCapture(e.pointerId); } catch (_) {}
            endDrag();
        }
        
        // Ê≥®ÂÜå‰∫ã‰ª∂
        petEl.addEventListener('pointerdown', onPointerDown);
        window.addEventListener('pointermove', onPointerMove);
        window.addEventListener('pointerup', onPointerUp);
        window.addEventListener('pointercancel', onPointerUp);
        
        // Â≠òÂÇ®Ê∏ÖÁêÜÂáΩÊï∞
        this.dragSystem = {
            destroy() {
                petEl.removeEventListener('pointerdown', onPointerDown);
                window.removeEventListener('pointermove', onPointerMove);
                window.removeEventListener('pointerup', onPointerUp);
                window.removeEventListener('pointercancel', onPointerUp);
                if (dragFrame) {
                    cancelAnimationFrame(dragFrame);
                    dragFrame = null;
                }
                if (self.isDragging) {
                    self.isDragging = false;
                    petEl.classList.remove('dragging');
                    document.body.style.cursor = '';
                    document.body.style.userSelect = '';
                }
            }
        };
    }

    
    // ÂàùÂßãÂåñÁ™óÂè£‰ΩçÁΩÆ
    async initializePosition() {
        if (typeof require !== 'undefined') {
            try {
                const { ipcRenderer } = require('electron');
                const position = await ipcRenderer.invoke('get-window-position');
                this.position = position;
                console.log('ÂàùÂßãÂåñÂÆ†Áâ©‰ΩçÁΩÆ:', this.position);
            } catch (error) {
                console.error('Ëé∑ÂèñÁ™óÂè£‰ΩçÁΩÆÂ§±Ë¥•:', error);
                this.position = { x: 100, y: 100 }; // ÈªòËÆ§‰ΩçÁΩÆ
            }
        }
    }
    
    // ËÆæÁΩÆÈº†Ê†á‰ΩçÁΩÆË∑üË∏™
    setupMouseTracking() {
        // Ë∑üË∏™Á™óÂè£ÂÜÖÈº†Ê†á‰ΩçÁΩÆÔºåËΩ¨Êç¢‰∏∫Â±èÂπïÂùêÊ†á
        document.addEventListener('mousemove', (e) => {
            // Â∞ÜÁõ∏ÂØπ‰∫éÁ™óÂè£ÁöÑÂùêÊ†áËΩ¨Êç¢‰∏∫Â±èÂπïÂùêÊ†á
            const screenX = (window.screenX || window.screenLeft || 0) + e.clientX;
            const screenY = (window.screenY || window.screenTop || 0) + e.clientY;
            
            this.mousePosition.x = screenX;
            this.mousePosition.y = screenY;
            
            // Ë∞ÉËØïËæìÂá∫
            // console.log('Èº†Ê†áÂ±èÂπïÂùêÊ†á:', screenX, screenY);
        });
        
        // Â∞ùËØïËé∑ÂèñÁ≥ªÁªüÁ∫ßÈº†Ê†á‰ΩçÁΩÆÔºàÂ¶ÇÊûúÊîØÊåÅÁöÑËØùÔºâ
        if (typeof require !== 'undefined') {
            try {
                const { ipcRenderer } = require('electron');
                // ÂèØ‰ª•ÂÆöÊúüÂêë‰∏ªËøõÁ®ãËØ∑Ê±ÇÈº†Ê†á‰ΩçÁΩÆ
                setInterval(() => {
                    if (this.state === 'excited') {
                        ipcRenderer.invoke('get-cursor-position').then(pos => {
                            if (pos) {
                                this.mousePosition.x = pos.x;
                                this.mousePosition.y = pos.y;
                            }
                        }).catch(() => {
                            // Â¶ÇÊûú‰∏ªËøõÁ®ã‰∏çÊîØÊåÅÔºåÂøΩÁï•ÈîôËØØ
                        });
                    }
                }, 500); // ÊØè500msÊõ¥Êñ∞‰∏ÄÊ¨°
            } catch (error) {
                console.log('Á≥ªÁªüÈº†Ê†á‰ΩçÁΩÆË∑üË∏™‰∏çÂèØÁî®Ôºå‰ΩøÁî®Á™óÂè£ÂÜÖË∑üË∏™');
            }
        }
    }
    
    setState(newState) {
        // Áù°Áú†Áä∂ÊÄÅÁâπÊÆäÂ§ÑÁêÜÔºöÂè™ÊúâËÉΩÈáèË∂≥Â§üÊâçËÉΩÂî§ÈÜí
        if (this.state === 'sleeping' && newState !== 'sleeping') {
            if (this.energy < 20) {
                console.log('ËÉΩÈáè‰∏çË∂≥ÔºåÊó†Ê≥ï‰ªéÁù°Áú†Áä∂ÊÄÅÂî§ÈÜí');
                this.showMessage('sleeping');
                return;
            } else {
                // ËÉΩÈáèË∂≥Â§üÔºåÂÖÅËÆ∏Âî§ÈÜí
                this.clearSleepRecovery();
            }
        }
        
        // Â¶ÇÊûúËÉΩÈáè‰∏∫0‰∏î‰∏çÊòØËøõÂÖ•Áù°Áú†Áä∂ÊÄÅÔºåÂº∫Âà∂ËøõÂÖ•Áù°Áú†
        if (this.energy <= 0 && newState !== 'sleeping') {
            console.log('ËÉΩÈáèËÄóÂ∞ΩÔºåÂº∫Âà∂ËøõÂÖ•Áù°Áú†Áä∂ÊÄÅ');
            this.forceSleep();
            return;
        }
        
        if (this.state !== newState) {
            // Ê∏ÖÈô§‰πãÂâçÁöÑÂÆöÊó∂Âô®
            this.clearExcitedMoveTimer();
            
            // ÊòæÁ§∫Áä∂ÊÄÅÂàáÊç¢ÊèêÁ§∫
            this.showStateChangeNotification(this.state, newState);
            
            this.pet.className = `pet ${newState}`;
            this.state = newState;
            
            // ÊéßÂà∂Áù°Áú†ÊåáÁ§∫Âô®ÁöÑÊòæÁ§∫
            if (this.sleepIndicator) {
                if (newState === 'sleeping') {
                    this.sleepIndicator.style.display = 'block';
                    // ÂºÄÂßãÁù°Áú†ÊÅ¢Â§ç
                    this.startSleepRecovery();
                } else {
                    this.sleepIndicator.style.display = 'none';
                    // ÂÅúÊ≠¢Áù°Áú†ÊÅ¢Â§ç
                    this.clearSleepRecovery();
                }
            }
            
            // Â¶ÇÊûúËøõÂÖ•ÂÖ¥Â•ãÁä∂ÊÄÅÔºåÂêØÂä®ÁßªÂä®ÂÆöÊó∂Âô®
            if (newState === 'excited') {
                this.startExcitedMoveTimer();
            }
            
            this.updateStatusDisplay();
            console.log(`ÂÆ†Áâ©Áä∂ÊÄÅÊîπÂèò: ${this.state} -> ${newState}`);
            
            // ÊòæÁ§∫ÂØπÂ∫îÁä∂ÊÄÅÁöÑÊ∂àÊÅØ
            setTimeout(() => {
                this.showMessage(newState);
            }, 500);
        }
    }
    
    startBehaviorLoop() {
        // ÂÆåÂÖ®Á¶ÅÁî®Ëá™Âä®Ë°å‰∏∫Âæ™ÁéØÔºåÊâÄÊúâÁä∂ÊÄÅÂàáÊç¢ÂøÖÈ°ªÁî±Áî®Êà∑ÊâãÂä®ÈÄâÊã©Ëß¶Âèë
        console.log('Ëá™Âä®Ë°å‰∏∫Âæ™ÁéØÂ∑≤Á¶ÅÁî®');
    }
    
    chooseNextState(possibleStates) {
        // Ê†πÊçÆÂøÉÊÉÖÂíåËÉΩÈáèÈÄâÊã©‰∏ã‰∏Ä‰∏™Áä∂ÊÄÅ
        if (this.energy < 30) {
            return 'sleeping';
        }
        
        if (this.mood > 80 && Math.random() < 0.3) {
            return 'excited';
        }
        
        // ÈöèÊú∫ÈÄâÊã©
        return possibleStates[Math.floor(Math.random() * possibleStates.length)];
    }
    
    showStateChangeNotification(oldState, newState) {
        const oldName = this.behaviors[oldState]?.name || oldState;
        const newName = this.behaviors[newState]?.name || newState;
        
        if (oldState && oldState !== newState) {
            // ÂàõÂª∫Áä∂ÊÄÅÂàáÊç¢ÊèêÁ§∫ÂÖÉÁ¥†
            const notification = document.createElement('div');
            notification.className = 'state-change-notification';
            notification.innerHTML = `${oldName} ‚Üí ${newName}`;
            notification.style.cssText = `
                position: absolute;
                top: -80px;
                left: 50%;
                transform: translateX(-50%);
                background: linear-gradient(45deg, #667eea, #764ba2);
                color: white;
                padding: 6px 12px;
                border-radius: 15px;
                font-size: 11px;
                font-weight: bold;
                white-space: nowrap;
                z-index: 1001;
                opacity: 0;
                transition: all 0.3s ease;
                pointer-events: none;
                box-shadow: 0 3px 10px rgba(0,0,0,0.4);
                border: 1px solid rgba(255,255,255,0.3);
            `;
            
            this.container.appendChild(notification);
            
            // ÊòæÁ§∫Âä®Áîª
            requestAnimationFrame(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateX(-50%) translateY(-5px)';
            });
            
            // 3ÁßíÂêéÊ∏êÈöêÂπ∂Âà†Èô§
            setTimeout(() => {
                notification.style.opacity = '0';
                notification.style.transform = 'translateX(-50%) translateY(-15px)';
                
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 300);
            }, 3000);
        }
    }
    
    randomWalk() {
        
        const screenWidth = window.screen.width;
        const screenHeight = window.screen.height;
        const petSize = 100;
        
        // ÈöèÊú∫ÁõÆÊ†á‰ΩçÁΩÆÔºà‰øùÊåÅÂú®Â±èÂπïËæπÁïåÂÜÖÔºâ
        const targetX = Math.random() * (screenWidth - petSize);
        const targetY = Math.random() * (screenHeight - petSize);
        
        this.moveToPosition(targetX, targetY);
    }
    
    moveToPosition(x, y) {
        // ÁßªÈô§Ëøô‰∏™ÂáΩÊï∞Ôºå‰ΩøÁî®Êñ∞ÁöÑ moveTo Êé•Âè£Êõø‰ª£
        console.log('ËØ∑‰ΩøÁî® moveTo Êé•Âè£Êõø‰ª£ moveToPosition');
        this.moveTo(x, y);
    }
    
    easeInOutQuad(t) {
        return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;
    }
    
    interact() {
        this.mood = Math.min(100, this.mood + 10);
        
        // ËÉΩÈáèÁ≥ªÁªü‰∫§‰∫í
        this.handleEnergyInteraction();
        
        // Êõ¥Êñ∞ÊúÄÂêé‰∫§‰∫íÊó∂Èó¥
        this.lastInteractionTime = Date.now();
        
        this.setState('excited');
        this.showMessage('greeting');
        this.updateMoodDisplay();
        
        // ÁßªÈô§Ëá™Âä®Áä∂ÊÄÅÂàáÊç¢ÔºåÊâÄÊúâÁä∂ÊÄÅÂàáÊç¢ÂøÖÈ°ªÁî±Áî®Êà∑ÊâãÂä®ÈÄâÊã©
        // setTimeout(() => {
        //     if (this.state === 'excited') {
        //         this.setState('idle');
        //     }
        // }, 2000);
    }
    
    // Â∑≤ÁßªÈô§ÂñÇÈ£üÂíåÁé©ËÄçÂäüËÉΩ
    
    sleep() {
        // Ê£ÄÊü•ÊòØÂê¶ÂèØ‰ª•Áù°Áú†ÔºàÂè™ÊúâÂú®ÈùûÂº∫Âà∂Áù°Áú†Êó∂ÊâçÊ£ÄÊü•Ôºâ
        if (this.energy > 50) {
            console.log('ËÉΩÈáèËøòÂæàÂÖÖË∂≥ÔºåÊöÇÊó∂‰∏çÊÉ≥Áù°Ëßâ');
            this.showMessage('idle');
            return;
        }
        
        this.setState('sleeping');
        this.showMessage('sleeping');
    }
    
    // Â∑≤ÁßªÈô§ÈöèÊú∫‰∫§‰∫íÂíåupdateStatsÂäüËÉΩ
    
    showMessage(type) {
        const messages = this.messages[type] || this.messages.idle;
        const message = messages[Math.floor(Math.random() * messages.length)];
        
        this.speechText.textContent = message;
        this.speechBubble.style.display = 'block';
        
        // 3ÁßíÂêéÈöêËóèÊ∂àÊÅØ
        setTimeout(() => {
            this.speechBubble.style.display = 'none';
        }, 3000);
    }
    
    updateStatusDisplay() {
        const stateNames = {
            idle: 'üí≠ ÂæÖÊú∫‰∏≠',
            excited: 'üéâ ÂÖ¥Â•ã‰∏≠',
            sleeping: 'üò¥ Áù°Ëßâ‰∏≠'
        };
        
        const currentStateName = stateNames[this.state] || this.state;
        
        // Ê†πÊçÆËÉΩÈáèÊ∞¥Âπ≥Ê∑ªÂä†Áä∂ÊÄÅÊåáÁ§∫
        let energyIcon = '';
        let energyStatus = '';
        
        if (this.energy <= 5) {
            energyIcon = ' üî¥'; // Á∫¢Ëâ≤Ë≠¶Âëä
            energyStatus = '(ÊûÅ‰Ωé)';
        } else if (this.energy <= 15) {
            energyIcon = ' üü†'; // Ê©ôËâ≤Ë≠¶Âëä
            energyStatus = '(Âæà‰Ωé)';
        } else if (this.energy <= 30) {
            energyIcon = ' üü°'; // ÈªÑËâ≤Ë≠¶Âëä
            energyStatus = '(‰Ωé)';
        } else if (this.energy <= 60) {
            energyIcon = ' üü°'; // ÈªÑËâ≤‰∏ÄËà¨
            energyStatus = '';
        } else if (this.energy >= 80) {
            energyIcon = ' üü¢'; // ÁªøËâ≤ÂÖÖÊª°
            energyStatus = '';
        }
        
        // ÊòæÁ§∫ËÉΩÈáèÊ∂àËÄóÁéá‰ø°ÊÅØ
        const currentDecayRate = this.energyDecayRates[this.state] || 0;
        const decayRatePerMinute = (currentDecayRate * 60 * 1000).toFixed(1);
        const statusSuffix = currentDecayRate > 0 ? ` (-${decayRatePerMinute}%/min)` : '';
        
        this.statusText.textContent = `${currentStateName}${energyIcon} | ÂøÉÊÉÖ: ${Math.round(this.mood)}% | ËÉΩÈáè: ${Math.round(this.energy)}%${energyStatus}${statusSuffix}`;
    }
    
    updateMoodDisplay() {
        // Êõ¥Êñ∞ÂøÉÊÉÖÊù°
        this.moodFill.style.width = `${this.mood}%`;
        
        // Ê†πÊçÆÂøÉÊÉÖÊîπÂèòÈ¢úËâ≤
        if (this.mood > 70) {
            this.moodFill.style.background = 'linear-gradient(90deg, #48dbfb, #0abde3)';
        } else if (this.mood > 40) {
            this.moodFill.style.background = 'linear-gradient(90deg, #feca57, #ff9ff3)';
        } else {
            this.moodFill.style.background = 'linear-gradient(90deg, #ff6b6b, #ee5a24)';
        }
        
        // Êõ¥Êñ∞ËÉΩÈáèÊù°
        const energyFill = document.getElementById('energy-fill');
        if (energyFill) {
            energyFill.style.width = `${this.energy}%`;
            
            // Ê†πÊçÆËÉΩÈáèÊ∞¥Âπ≥ÊîπÂèòÈ¢úËâ≤
            if (this.energy > 70) {
                energyFill.style.background = 'linear-gradient(90deg, #4caf50, #66bb6a)';
            } else if (this.energy > 30) {
                energyFill.style.background = 'linear-gradient(90deg, #ffa726, #ffb74d)';
            } else if (this.energy > 10) {
                energyFill.style.background = 'linear-gradient(90deg, #ff7043, #ff8a65)';
            } else {
                energyFill.style.background = 'linear-gradient(90deg, #ff4757, #ff6b7a)';
            }
        }
    }
    
    // ÂÆ†Áâ©ÁßªÂä®Êé•Âè£ÂáΩÊï∞
    moveTo(targetX, targetY, callback) {
        if (this.isMoving) {
            console.log('ÂÆ†Áâ©Ê≠£Âú®ÁßªÂä®‰∏≠ÔºåÂøΩÁï•Êñ∞ÁöÑÁßªÂä®ËØ∑Ê±Ç');
            return;
        }
        
        // Ê£ÄÊü•ËÉΩÈáèÊòØÂê¶Ë∂≥Â§üÁßªÂä®
        if (this.energy < 3) {
            console.log('ËÉΩÈáè‰∏çË∂≥ÔºåÊó†Ê≥ïÁßªÂä®');
            this.showMessage('energyLow');
            return;
        }
        
        // ËÆ°ÁÆóÁßªÂä®Ë∑ùÁ¶ªÂíåËÉΩÈáèÊ∂àËÄó
        const distance = Math.sqrt(Math.pow(targetX - this.position.x, 2) + Math.pow(targetY - this.position.y, 2));
        const energyCost = this.calculateMoveEnergyCost(distance);
        
        console.log(`ÂáÜÂ§áÁßªÂä®Ë∑ùÁ¶ª: ${distance.toFixed(0)}px, ËÉΩÈáèÊ∂àËÄó: ${energyCost.toFixed(1)}%`);
        
        this.isMoving = true;
        console.log(`ÂÆ†Áâ©ÂºÄÂßãÁßªÂä®Âà∞‰ΩçÁΩÆ: (${targetX}, ${targetY})`);
        
        // ‰ΩøÁî® Electron ÁöÑ IPC Êù•ÁßªÂä®Á™óÂè£
        if (typeof require !== 'undefined') {
            const { ipcRenderer } = require('electron');
            
            const startX = this.position.x;
            const startY = this.position.y;
            const duration = Math.min(2000, Math.max(800, distance * 1.5)); // Ë∞ÉÊï¥ÁßªÂä®ÈÄüÂ∫¶
            const steps = 30;
            const stepDelay = duration / steps;
            
            let currentStep = 0;
            
            const moveStep = () => {
                currentStep++;
                const progress = currentStep / steps;
                const easeProgress = this.easeInOutQuad(progress);
                
                const currentX = startX + (targetX - startX) * easeProgress;
                const currentY = startY + (targetY - startY) * easeProgress;
                
                ipcRenderer.send('move-window', Math.round(currentX), Math.round(currentY));
                this.position.x = currentX;
                this.position.y = currentY;
                
                if (currentStep < steps) {
                    setTimeout(moveStep, stepDelay);
                } else {
                    this.isMoving = false;
                    
                    // ÁßªÂä®ÂÆåÊàêÂêéÊ∂àËÄóËÉΩÈáè
                    this.consumeEnergyForMovement(energyCost);
                    
                    console.log('ÂÆ†Áâ©ÁßªÂä®ÂÆåÊàê');
                    if (callback) callback();
                }
            };
            
            moveStep();
        } else {
            console.error('require ‰∏çÂèØÁî®ÔºåÊó†Ê≥ïÁßªÂä®Á™óÂè£');
            this.isMoving = false;
        }
    }
    
    // ÁßªÂä®Âà∞Èº†Ê†á‰ΩçÁΩÆ
    moveToMouse() {
        if (!this.mousePosition.x && !this.mousePosition.y) {
            console.log('Êú™Ê£ÄÊµãÂà∞Èº†Ê†á‰ΩçÁΩÆÔºå‰ΩøÁî®ÂΩìÂâçÁ™óÂè£‰∏≠ÂøÉ‰ΩçÁΩÆ');
            // Â¶ÇÊûúÊ≤°ÊúâÈº†Ê†á‰ΩçÁΩÆÔºåÈöèÊú∫ÁßªÂä®Âà∞Â±èÂπïÁöÑ‰∏≠ÂøÉÂå∫Âüü
            const centerX = window.screen.width / 2;
            const centerY = window.screen.height / 2;
            const randomOffsetX = (Math.random() - 0.5) * 200; // -100 Âà∞ 100
            const randomOffsetY = (Math.random() - 0.5) * 200;
            
            this.mousePosition.x = centerX + randomOffsetX;
            this.mousePosition.y = centerY + randomOffsetY;
        }
        
        console.log('ÂΩìÂâçÈº†Ê†á‰ΩçÁΩÆ:', this.mousePosition.x, this.mousePosition.y);
        console.log('Â±èÂπïÂ∞∫ÂØ∏:', window.screen.width, window.screen.height);
        
        // ËÆ°ÁÆóÈº†Ê†áÈôÑËøëÁöÑÂêàÈÄÇ‰ΩçÁΩÆÔºàÈÅøÂÖçÂÆåÂÖ®Ë¶ÜÁõñÈº†Ê†áÔºâ
        // Âú®Èº†Ê†áÂë®Âõ¥100ÂÉèÁ¥†ËåÉÂõ¥ÂÜÖÈöèÊú∫ÈÄâÊã©‰ΩçÁΩÆ
        const offsetRadius = 80; // ÂÅèÁßªÂçäÂæÑ
        const angle = Math.random() * 2 * Math.PI; // ÈöèÊú∫ËßíÂ∫¶
        const distance = Math.random() * offsetRadius + 20; // 20-100ÂÉèÁ¥†Ë∑ùÁ¶ª
        
        const offsetX = Math.cos(angle) * distance;
        const offsetY = Math.sin(angle) * distance;
        
        let targetX = this.mousePosition.x + offsetX;
        let targetY = this.mousePosition.y + offsetY;
        
        // ÂÆâÂÖ®ËæπÁïåÊ£ÄÊü•ÔºåÁ°Æ‰øùÂÆ†Áâ©‰∏ç‰ºöÁßªÂä®Âà∞Â±èÂπïÂ§ñ
        const petSize = 120; // ÂÆ†Áâ©Á™óÂè£Â§ßÂ∞èÔºàÁïô‰∏Ä‰∫õÂÆâÂÖ®ËæπË∑ùÔºâ
        const safeMargin = 10; // ÂÆâÂÖ®ËæπË∑ù
        
        const minX = safeMargin;
        const minY = safeMargin;
        const maxX = window.screen.width - petSize - safeMargin;
        const maxY = window.screen.height - petSize - safeMargin;
        
        // ÈôêÂà∂Âú®ÂÆâÂÖ®ËåÉÂõ¥ÂÜÖ
        targetX = Math.max(minX, Math.min(maxX, targetX));
        targetY = Math.max(minY, Math.min(maxY, targetY));
        
        console.log(`ÂÆ†Áâ©ÁßªÂä®ÁõÆÊ†á: (${Math.round(targetX)}, ${Math.round(targetY)})`);
        console.log(`ËæπÁïåËåÉÂõ¥: X(${minX}-${maxX}), Y(${minY}-${maxY})`);
        
        this.moveTo(targetX, targetY, () => {
            this.showMessage('excited');
        });
    }
    
    // ÂêØÂä®ÂÖ¥Â•ãÁä∂ÊÄÅ‰∏ãÁöÑÁßªÂä®ÂÆöÊó∂Âô®
    startExcitedMoveTimer() {
        this.clearExcitedMoveTimer();
        
        const checkAndMove = () => {
            if (this.state !== 'excited') {
                return; // Â¶ÇÊûú‰∏çÂú®ÂÖ¥Â•ãÁä∂ÊÄÅÔºåÂÅúÊ≠¢Ê£ÄÊü•
            }
            
            const timeSinceLastInteraction = Date.now() - this.lastInteractionTime;
            
            if (timeSinceLastInteraction >= 5000) { // 5ÁßíÊ≤°Êúâ‰∫§‰∫í
                console.log('5ÁßíÂÜÖÊ≤°Êúâ‰∫§‰∫íÔºåÂÆ†Áâ©‰∏ªÂä®ÁßªÂä®Âà∞Èº†Ê†á‰ΩçÁΩÆ');
                this.moveToMouse();
                // ÈáçÁΩÆ‰∫§‰∫íÊó∂Èó¥ÔºåÈÅøÂÖçÈ¢ëÁπÅÁßªÂä®
                this.lastInteractionTime = Date.now();
            }
            
            // ÁªßÁª≠Ê£ÄÊü•ÔºàÊØèÁßíÊ£ÄÊü•‰∏ÄÊ¨°Ôºâ
            this.excitedMoveTimer = setTimeout(checkAndMove, 1000);
        };
        
        // ÂºÄÂßãÁ¨¨‰∏ÄÊ¨°Ê£ÄÊü•
        this.excitedMoveTimer = setTimeout(checkAndMove, 1000);
    }
    
    // Ê∏ÖÈô§ÂÖ¥Â•ãÁä∂ÊÄÅÁßªÂä®ÂÆöÊó∂Âô®
    clearExcitedMoveTimer() {
        if (this.excitedMoveTimer) {
            clearTimeout(this.excitedMoveTimer);
            this.excitedMoveTimer = null;
        }
    }
    
    // ==================== ËÉΩÈáèÁ≥ªÁªü ==================== //
    
    // ÂêØÂä®ËÉΩÈáèÁ≥ªÁªü
    startEnergySystem() {
        console.log('ËÉΩÈáèÁ≥ªÁªüÂ∑≤ÂêØÂä®');
        this.lastEnergyUpdateTime = Date.now();
        this.startEnergyDecay();
    }
    
    // ÂºÄÂßãËÉΩÈáèË°∞Âáè
    startEnergyDecay() {
        this.clearEnergyDecay();
        
        const updateEnergy = () => {
            if (!this.isEnergySystemActive) return;
            
            const now = Date.now();
            const deltaTime = now - this.lastEnergyUpdateTime;
            this.lastEnergyUpdateTime = now;
            
            // Ê†πÊçÆÂΩìÂâçÁä∂ÊÄÅËé∑ÂèñÂØπÂ∫îÁöÑËÉΩÈáèÊ∂àËÄóÁéá
            const currentDecayRate = this.energyDecayRates[this.state] || this.energyDecayRates.idle;
            
            if (currentDecayRate > 0 && this.energy > 0) {
                const energyLoss = currentDecayRate * deltaTime;
                this.energy = Math.max(0, this.energy - energyLoss);
                
                // Ê£ÄÊü•ËÉΩÈáèÊ∞¥Âπ≥Âπ∂Áõ∏Â∫îÂ§ÑÁêÜ
                this.checkEnergyLevel();
                
                // Êõ¥Êñ∞ÊòæÁ§∫
                this.updateMoodDisplay();
                
                // ÊØè10ÁßíËæìÂá∫‰∏ÄÊ¨°Êó•ÂøóÔºåÈÅøÂÖçÈ¢ëÁπÅËæìÂá∫
                if (Math.floor(now / 10000) !== Math.floor((now - deltaTime) / 10000)) {
                    console.log(`ËÉΩÈáè: ${this.energy.toFixed(1)}% (Áä∂ÊÄÅ: ${this.state}, Ê∂àËÄóÁéá: ${(currentDecayRate * 1000).toFixed(3)}%/s)`);
                }
            }
            
            // ÁªßÁª≠‰∏ã‰∏ÄÊ¨°Êõ¥Êñ∞
            this.energyDecayTimer = setTimeout(updateEnergy, 1000); // ÊØèÁßí1Êõ¥Êñ∞
        };
        
        updateEnergy();
    }
    
    // Ê∏ÖÈô§ËÉΩÈáèË°∞ÂáèÂÆöÊó∂Âô®
    clearEnergyDecay() {
        if (this.energyDecayTimer) {
            clearTimeout(this.energyDecayTimer);
            this.energyDecayTimer = null;
        }
    }
    
    // Ê£ÄÊü•ËÉΩÈáèÊ∞¥Âπ≥Âπ∂Â§ÑÁêÜ
    checkEnergyLevel() {
        if (this.energy <= 0) {
            // ËÉΩÈáèËÄóÂ∞ΩÔºåÂº∫Âà∂ËøõÂÖ•Áù°Áú†Áä∂ÊÄÅ
            this.forceSleep();
        } else if (this.energy <= 5) {
            // ÊûÅ‰ΩéËÉΩÈáèÔºåÈ¢ëÁπÅË≠¶Âëä
            if (Math.random() < 0.5) { // 50%Âá†ÁéáÊòæÁ§∫Ê∂àÊÅØ
                this.showMessage('energyLow');
            }
        } else if (this.energy <= 15) {
            // ‰ΩéËÉΩÈáèË≠¶Âëä
            if (Math.random() < 0.2) { // 20%Âá†ÁéáÊòæÁ§∫Ê∂àÊÅØ
                this.showMessage('energyLow');
            }
        } else if (this.energy <= 30) {
            // ‰∏≠‰ΩéËÉΩÈáèÁä∂ÊÄÅ
            if (Math.random() < 0.1) { // 10%Âá†ÁéáÊòæÁ§∫Ê∂àÊÅØ
                this.showMessage('tired');
            }
        }
        
        // ËÉΩÈáè‰ΩéÊó∂ÂΩ±ÂìçË°å‰∏∫Ë°®Áé∞
        this.adjustBehaviorByEnergy();
    }
    
    // Ê†πÊçÆËÉΩÈáèÊ∞¥Âπ≥Ë∞ÉÊï¥Ë°å‰∏∫Ë°®Áé∞
    adjustBehaviorByEnergy() {
        const petSprite = this.pet.querySelector('.pet-sprite');
        if (!petSprite) return;
        
        // Ê∏ÖÈô§‰πãÂâçÁöÑËÉΩÈáèÁõ∏ÂÖ≥Ê†∑Âºè
        petSprite.classList.remove('low-energy', 'very-low-energy');
        
        if (this.energy <= 15) {
            // ÊûÅ‰ΩéËÉΩÈáèÔºöÂä®‰ΩúÂèòÊÖ¢ÔºåÈÄèÊòéÂ∫¶Èôç‰Ωé
            petSprite.classList.add('very-low-energy');
        } else if (this.energy <= 30) {
            // ‰ΩéËÉΩÈáèÔºöËΩªÂæÆÂä®‰ΩúÂèòÊÖ¢
            petSprite.classList.add('low-energy');
        }
    }
    
    // Âº∫Âà∂ËøõÂÖ•Áù°Áú†Áä∂ÊÄÅ
    forceSleep() {
        console.log('ËÉΩÈáèËÄóÂ∞ΩÔºåÂº∫Âà∂ËøõÂÖ•Áù°Áú†Áä∂ÊÄÅ');
        this.energy = 0;
        this.setState('sleeping');
        this.showMessage('sleeping');
        this.startSleepRecovery();
    }
    
    // ÂºÄÂßãÁù°Áú†ÊÅ¢Â§ç
    startSleepRecovery() {
        this.clearSleepRecovery();
        
        const recoverEnergy = () => {
            if (this.state === 'sleeping') {
                this.energy = Math.min(100, this.energy + 1); // ÊØè10ÁßíÊÅ¢Â§ç1%
                this.updateMoodDisplay();
                
                console.log(`Áù°Áú†ÊÅ¢Â§çËÉΩÈáè: ${this.energy.toFixed(1)}%`);
                
                // Â¶ÇÊûúËÉΩÈáèÊÅ¢Â§çÂà∞‰∏ÄÂÆöÁ®ãÂ∫¶ÔºåÂÖÅËÆ∏ÊâãÂä®Âî§ÈÜí
                if (this.energy >= 20) {
                    console.log('ËÉΩÈáèÊÅ¢Â§çËá≥ 20%ÔºåÂèØ‰ª•ÊâãÂä®Âî§ÈÜí');
                }
                
                // ÁªßÁª≠ÊÅ¢Â§ç
                if (this.energy < 100) {
                    this.sleepRecoveryTimer = setTimeout(recoverEnergy, 10000); // 10ÁßíÊÅ¢Â§ç‰∏ÄÊ¨°
                } else {
                    console.log('ËÉΩÈáèÂ∑≤Êª°ÔºåÁªìÊùüÁù°Áú†ÊÅ¢Â§ç');
                }
            }
        };
        
        // Á´ãÂç≥ÂºÄÂßãÁ¨¨‰∏ÄÊ¨°ÊÅ¢Â§ç
        this.sleepRecoveryTimer = setTimeout(recoverEnergy, 10000);
    }
    
    // Ê∏ÖÈô§Áù°Áú†ÊÅ¢Â§çÂÆöÊó∂Âô®
    clearSleepRecovery() {
        if (this.sleepRecoveryTimer) {
            clearTimeout(this.sleepRecoveryTimer);
            this.sleepRecoveryTimer = null;
        }
    }
    
    // Â§ÑÁêÜ‰∫§‰∫íËÉΩÈáèÊÅ¢Â§ç
    handleEnergyInteraction() {
        const now = Date.now();
        const timeSinceLastInteraction = now - this.lastInteractionForEnergy;
        
        // Èò≤Ê≠¢ËøáÂ∫¶ÁÇπÂáªÂà∑ËÉΩÈáè
        if (timeSinceLastInteraction >= this.minInteractionInterval) {
            const energyBefore = this.energy;
            this.energy = Math.min(100, this.energy + this.energyRecoveryAmount);
            this.lastInteractionForEnergy = now;
            
            // Â¶ÇÊûúËÉΩÈáèÊúâÊÅ¢Â§çÔºåÊòæÁ§∫Ê∂àÊÅØ
            if (this.energy > energyBefore) {
                const recoveredAmount = this.energy - energyBefore;
                console.log(`‰∫§‰∫íÊÅ¢Â§çËÉΩÈáè: +${recoveredAmount.toFixed(1)}% (Ââ©‰Ωô: ${this.energy.toFixed(1)}%)`);
                
                // Â¶ÇÊûú‰ªé‰ΩéËÉΩÈáèÁä∂ÊÄÅÊÅ¢Â§çÔºåÊòæÁ§∫ÁâπÊÆäÊ∂àÊÅØ
                if (energyBefore <= 30 && this.energy > 30) {
                    this.showMessage('energyRecovered');
                }
            }
            
            // Â¶ÇÊûúÂú®Áù°Áú†Áä∂ÊÄÅ‰∏îËÉΩÈáèË∂≥Â§üÔºåÂèØ‰ª•Âî§ÈÜí
            if (this.state === 'sleeping' && this.energy >= 20) {
                this.wakeUpFromSleep();
            }
        } else {
            const remainingCooldown = Math.ceil((this.minInteractionInterval - timeSinceLastInteraction) / 1000);
            console.log(`‰∫§‰∫íÂ§™È¢ëÁπÅÔºåËøòÈúÄÁ≠âÂæÖ ${remainingCooldown} Áßí`);
            
            // ÊòæÁ§∫ÂÜ∑Âç¥ÊèêÁ§∫
            if (Math.random() < 0.3) {
                this.showMessage('idle');
            }
        }
    }
    
    // ‰ªéÁù°Áú†‰∏≠Âî§ÈÜí
    wakeUpFromSleep() {
        if (this.state === 'sleeping' && this.energy >= 20) {
            console.log('‰ªéÁù°Áú†‰∏≠Âî§ÈÜí');
            this.clearSleepRecovery();
            this.setState('idle');
            this.showMessage('energyRecovered');
        }
    }
    
    // ËÆ°ÁÆóÁßªÂä®ËÉΩÈáèÊ∂àËÄó
    calculateMoveEnergyCost(distance) {
        // Ê†πÊçÆË∑ùÁ¶ªËÆ°ÁÆóËÉΩÈáèÊ∂àËÄóÔºåË∑ùÁ¶ªË∂äËøúÊ∂àËÄóË∂äÂ§ö
        const baseDistance = 200; // Âü∫Á°ÄË∑ùÁ¶ªÔºàÂÉèÁ¥†Ôºâ
        const distanceRatio = Math.min(distance / baseDistance, 3); // ÊúÄÂ§ö3ÂÄçÂü∫Á°ÄÊ∂àËÄó
        const energyCost = this.moveEnergyCost + (this.maxMoveEnergyCost - this.moveEnergyCost) * (distanceRatio - 1) / 2;
        
        return Math.min(this.maxMoveEnergyCost, Math.max(this.moveEnergyCost, energyCost));
    }
    
    // Ê∂àËÄóÁßªÂä®ËÉΩÈáè
    consumeEnergyForMovement(energyCost) {
        this.energy = Math.max(0, this.energy - energyCost);
        console.log(`ÁßªÂä®Ê∂àËÄóËÉΩÈáè: ${energyCost.toFixed(1)}%, Ââ©‰ΩôËÉΩÈáè: ${this.energy.toFixed(1)}%`);
        
        // Êõ¥Êñ∞ÊòæÁ§∫
        this.updateMoodDisplay();
        
        // Ê£ÄÊü•ËÉΩÈáèÊ∞¥Âπ≥
        this.checkEnergyLevel();
    }
    
    // ==================== ËÉΩÈáèÁ≥ªÁªüÁªìÊùü ==================== //
    
    // Ê∏ÖÁêÜÊñπÊ≥ïÔºàÁî®‰∫éÁªÑ‰ª∂ÈîÄÊØÅÔºâ
    destroy() {
        // Ê∏ÖÁêÜËÉΩÈáèÁ≥ªÁªü
        this.isEnergySystemActive = false;
        this.clearEnergyDecay();
        this.clearSleepRecovery();
        this.clearExcitedMoveTimer();
        
        // Ê∏ÖÁêÜÊãñÊãΩÁ≥ªÁªü
        if (this.dragSystem) {
            this.dragSystem.destroy();
            this.dragSystem = null;
        }
        
        // Ê∏ÖÁêÜDOMÂºïÁî®
        this.pet = null;
        this.container = null;
        this.statusText = null;
        this.moodFill = null;
        this.energyFill = null;
        this.speechBubble = null;
        this.speechText = null;
        this.sleepIndicator = null;
        
        console.log('Ê°åÈù¢ÂÆ†Áâ©Á≥ªÁªüÂ∑≤Ê∏ÖÁêÜ');
    }
    
    // Â∑≤ÁßªÈô§updateStatsÂäüËÉΩ
}

// ÂÖ®Â±ÄÂÆ†Áâ©ÂÆû‰æã
let desktopPet;

// ÂΩìÈ°µÈù¢Âä†ËΩΩÂÆåÊàêÊó∂ÂàùÂßãÂåñÂÆ†Áâ©
document.addEventListener('DOMContentLoaded', () => {
    desktopPet = new DesktopPet();
    // ÂÖ®Â±ÄÊö¥Èú≤ÂÆ†Áâ©ÂÆû‰æã
    window.desktopPet = desktopPet;
});

// ÂØºÂá∫ÂáΩÊï∞‰æõHTMLË∞ÉÁî®Ôºà‰øùÁïôsleepÊñπÊ≥ïÔºâ
window.petSleep = () => desktopPet?.sleep();

// ÂØºÂá∫ÂáΩÊï∞‰æõHTMLË∞ÉÁî®Ôºà‰øùÁïôsleepÊñπÊ≥ïÔºâ
window.petSleep = () => desktopPet?.sleep();